---
layout: default
title: Home
permalink: /table
--- 
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mines Gambling Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f5f5f5;
            margin: 0;
            padding: 0;
        }
        h1 {
            margin-top: 20px;
        }
        #game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
        }
        label {
            margin-bottom: 5px;
        }
        input[type="number"] {
            width: 80px;
            padding: 5px;
            margin-bottom: 10px;
        }
        button {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            margin-bottom: 10px;
        }
        button:hover {
            background-color: #45a049;
        }
        #board {
            display: grid;
            grid-template-columns: repeat(5, 1fr); /* Each column occupies equal space */
            grid-template-rows: repeat(5, 1fr); /* Each row occupies equal space */
            gap: 5px;
            width: 400px; /* Adjust the width of the grid container */
            height: 400px; /* Adjust the height of the grid container */
            margin-bottom: 10px;
        }
        #userInfo {
            position: absolute;
            top: 20px;
            right: 20px;
            font-weight: bold;
        }
        .cell {
                    border: 1px solid #ccc;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    background-color: #fff;
                    font-size: 18px;
                    font-weight: bold;
                    color: #333;
                    cursor: pointer;
                    transition: background-color 0.3s;
                    width: 80px; /* Set fixed width */
                    height: 80px; /* Set fixed height */
                }

        .cell:hover {
            background-color: #f0f0f0;
        }
        #result {
            margin-top: 20px;
            font-size: 20px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Mines Gambling Game</h1>
    <div id="game-container">
        <label for="betAmount">Enter your bet amount:</label>
        <input type="number" id="betAmount">
        <label for="numBombs">Choose number of bombs (max 5):</label>
        <input type="number" id="numBombs" max="5" min="1" value="1">
        <button onclick="startGame()">Start Game</button>
        <button onclick="cashOut()" id="cashOutButton" style="display:none">Cash Out</button>
        <div id="board"></div>
        <div id="result"></div>
    </div>
     <div id="userInfo"></div>
<script>
        let betAmount = 0;
        let numBombs = 1;
        let grid = [];
        let gameStarted = false;
        let moneyCount = 0;

        // Function to start the game
        function startGame() {
            if (gameStarted) return;
            betAmount = parseInt(document.getElementById('betAmount').value);
            numBombs = parseInt(document.getElementById('numBombs').value);
            if (isNaN(betAmount) || betAmount <= 0 || betAmount > 100) {
                alert('Please enter a valid bet amount (1-100 credits).');
                return;
            }
            if (numBombs < 1 || numBombs > 5) {
                alert('Number of bombs should be between 1 and 5.');
                return;
            }
            createGrid();
            gameStarted = true;
            document.getElementById('cashOutButton').style.display = 'inline';
        }

        // Function to create the grid
        function createGrid() {
            grid = [];
            for (let i = 0; i < 5; i++) {
                grid.push(new Array(5).fill(0));
            }
            placeBombs();
            renderGrid();
        }

        // Function to place bombs randomly
        function placeBombs() {
            for (let i = 0; i < numBombs; i++) {
                let x, y;
                do {
                    x = Math.floor(Math.random() * 5);
                    y = Math.floor(Math.random() * 5);
                } while (grid[x][y] === -1 || isAdjacentBomb(x, y));
                grid[x][y] = -1;
            }
        }

        // Function to check if a cell is adjacent to a bomb
        function isAdjacentBomb(x, y) {
            const neighbors = [
                [x - 1, y - 1], [x - 1, y], [x - 1, y + 1],
                [x, y - 1], /* Current cell */ [x, y + 1],
                [x + 1, y - 1], [x + 1, y], [x + 1, y + 1]
            ];
            for (const [nx, ny] of neighbors) {
                if (nx >= 0 && nx < 5 && ny >= 0 && ny < 5 && grid[nx][ny] === -1) {
                    return true;
                }
            }
            return false;
        }

        // Function to render the grid
        function renderGrid() {
            const boardElement = document.getElementById('board');
            boardElement.innerHTML = '';
            for (let i = 0; i < 5; i++) {
                for (let j = 0; j < 5; j++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.dataset.x = i;
                    cell.dataset.y = j;
                    cell.textContent = ''; // Clearing any previous content
                    cell.addEventListener('click', handleClick);
                    boardElement.appendChild(cell);
                }
            }
        }

        // Function to handle cell click
        function handleClick(event) {
            if (!gameStarted) {
                alert('Please start the game first.');
                return;
            }
            const x = parseInt(event.target.dataset.x);
            const y = parseInt(event.target.dataset.y);
            const cell = event.target;
            if (grid[x][y] === -1) {
                cell.textContent = 'Bomb'; // Displaying bomb text
                document.getElementById('result').textContent = 'You hit a bomb! You lose ' + betAmount + ' credits.';
                endGame('loss'); // Call endGame with 'loss' as the outcome
            } else {
                moneyCount++;
                cell.textContent = 'Money'; // Displaying money text
                if (moneyCount === (25 - numBombs)) {
                    const payout = betAmount * moneyCount;
                    document.getElementById('result').textContent = 'Congratulations! You won ' + payout + ' credits!';
                    endGame('win'); // Call endGame with 'win' as the outcome
                }
            }
        }

        // Function to cash out
        function cashOut() {
            const payout = betAmount * moneyCount;
            document.getElementById('result').textContent = 'You cashed out and won ' + payout + ' credits!';
            endGame('win'); // Call endGame with 'win' as the outcome
        }

        // Function to end the game and send the outcome to the backend
        function endGame(outcome) {
            gameStarted = false;
            document.getElementById('cashOutButton').style.display = 'none';
            sendGameOutcomeToBackend(outcome); // Send the game outcome to the backend
        }

        // Function to send the game outcome data to the backend API
        function sendGameOutcomeToBackend(outcome) {
            const userId = 123; // Replace with the actual user ID
            const chipsChange = outcome === 'win' ? betAmount : -betAmount; // Adjust chips based on win/loss

            // Define the data to be sent in the POST request
            const postData = {
                userId: userId,
                chipsChange: chipsChange
            };

            // Define the URL of the backend API endpoint to handle the POST request
            const url = '/update_chips'; // Replace this with the actual URL of your backend API endpoint

            // Define options for the fetch() function
            const options = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(postData) // Convert data to JSON format
            };

            // Send the POST request to the backend API endpoint
            fetch(url, options)
                .then(response => {
                    // Check if the response is successful
                    if (response.ok) {
                        // Optionally, handle the response if needed
                        console.log('Chips updated successfully');
                    } else {
                        // Handle errors if the response is not successful
                        console.error('Failed to update chips');
                    }
                })
                .catch(error => {
                    // Handle errors if the fetch() function encounters an error
                    console.error('Error:', error);
                });
        }
        function updateUserInfo(username, chips) {
            const userInfoDiv = document.getElementById('userInfo');
            userInfoDiv.innerHTML = `Welcome, ${username} | Chips: ${chips}`;
            userInfoDiv.style.display = 'block';
        }

async function displayUserInfo() {
    const userId = localStorage.getItem('userId'); // Retrieve user ID from local storage
    if (userId) {
        try {
            const response = await fetch(`/api/users/${userId}`); // Assuming this endpoint fetches user info
            if (response.ok) {
                const userData = await response.json();
                const { name, chips } = userData; // Extract username and chips from response
                updateUserInfo(name, chips); // Update user info display
            } else {
                console.error('Failed to fetch user info');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }
}

        }

        // Function to fetch user info from the backend API
        async function fetchUserInfo(userId) {
            try {
                const response = await fetch(`http://127.0.0.1:8086/api/users/${userId}`);
                if (response.ok) {
                    const userData = await response.json();
                    const { name, chips } = userData; // Extract username and chips from response
                    updateUserInfo(name, chips); // Update user info display
                } else {
                    console.error('Failed to fetch user info');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        // Call displayUserInfo() when the page loads to check if the user is logged in
        window.onload = displayUserInfo;
    </script>